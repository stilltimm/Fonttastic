# Name
name: Publish Beta & Release 

# Triggers
on:
  workflow_dispatch:

# Environment
env:
  # XC setup
  XC_VERSION: ${{ '13.2.1' }}
  # Project Versioning
  CURRENT_PROJECT_VERSION_PATH: ${{ './.current-project-version' }}

# Jobs
jobs:
  archiveAndExport:
    name: Archive and Export
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - xcConfig: 'Release'
            xcArchivePath: './artifacts/Fonttastic-Release.xcarchive'
            xcExportPath: './artifacts/Fonttastic-Release'
            appPath: './artifacts/Fonttastic-Release/Fonttastic.ipa'
            projectVersionSuffix: ''
          - xcConfig: 'Beta'
            xcArchivePath: './artifacts/Fonttastic-Beta.xcarchive'
            xcExportPath: './artifacts/Fonttastic-Beta'
            appPath: './artifacts/Fonttastic-Beta/Fonttastic.ipa'
            projectVersionSuffix: '.9.41'
    env:
      # XC Setup
      XC_WORKSPACE: ${{ 'Fonttastic.xcworkspace' }}
      XC_SCHEME: ${{ 'Fonttastic' }}
      XC_EXPORT_OPTIONS_FILE_PATH: ${{ './CI/ExportOptions.plist' }}
      XC_CONFIG: ${{ matrix.xcConfig }}
      XC_ARCHIVE_PATH: ${{ matrix.xcArchivePath }}
      XC_EXPORT_PATH: ${{ matrix.xcExportPath }}
      # Environment setup
      ENVIRONMENT_FILE_CONTENTS: ${{ secrets.ENVIRONMENT_FILE_CONTENTS }}
      # Version Formats
      MARKETING_VERSION_FORMAT: ${{ '([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?' }}
      PROJECT_VERSION_FORMAT: ${{ '[0-9\.]{1,}' }}
      # Keychain
      KEYCHAIN: ${{ 'fonttastic-ios.keychain' }}
      # Certificates
      ENCRYPTED_CERTS_FILE_PATH: ${{ './CI/certs.p12.gpg' }}
      DECRYPTED_CERTS_FILE_PATH: ${{ './CI/certs.p12' }}
      CERTS_ENCRYPTION_PWD: ${{ secrets.CERTS_ENCRYPTION_PWD }}
      CERTS_EXPORT_PWD: ${{ secrets.CERTS_EXPORT_PWD }}
      # Provisioning Profiles
      ENCRYPTED_PROVISION_FILE_PATH: ${{ './CI/provisioning.tar.gz.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ './CI/provisioning.tar.gz' }}
      PROVISION_ENCRYPTION_PWD: ${{ secrets.PROVISION_ENCRYPTION_PWD }}
      # Versioning
      PROJECT_VERSION_SUFFIX: ${{ matrix.projectVersionSuffix }}
    steps:
      - name: Echo Run
        run: echo "Running job with '$XC_CONFIG' configuration"

      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Add Project Version Suffix If Needed
        run: |
          echo "$CURRENT_PROJECT_VERSION_PATH contents is '$(cat $CURRENT_PROJECT_VERSION_PATH)', will append '$PROJECT_VERSION_SUFFIX'"
          echo "$PROJECT_VERSION_SUFFIX" >> $CURRENT_PROJECT_VERSION_PATH
          echo "$CURRENT_PROJECT_VERSION_PATH contents is now '$(cat $CURRENT_PROJECT_VERSION_PATH)'"

      - name: Create Environment File
        run: echo $ENVIRONMENT_FILE_CONTENTS > ./FonttasticTools/Resources/Environment.plist

      - name: Fetch Dependencies & Generate Project
        run: |
          sudo chmod +x ./generate-project.sh
          ./generate-project.sh

      - name: Get Version Numbers
        id: versions
        run: |
          echo "Getting marketing version..."
          /usr/bin/xcrun agvtool what-marketing-version
          /usr/bin/xcrun agvtool what-marketing-version | grep -Eo "$MARKETING_VERSION_FORMAT" | head -1
          echo "::set-output name=MARKETING_VERSION::$( /usr/bin/xcrun agvtool what-marketing-version | grep -Eo "$MARKETING_VERSION_FORMAT" | head -1 )"
          echo "Getting project version..."
          /usr/bin/xcrun agvtool what-version
          /usr/bin/xcrun agvtool what-version | grep -Eo "$PROJECT_VERSION_FORMAT" | head -1
          echo "::set-output name=PROJECT_VERSION::$(/usr/bin/xcrun agvtool what-version | grep -Eo "$PROJECT_VERSION_FORMAT" | head -1)"

      - name: Print App Version
        run: |
          echo "App version would be ${{ steps.versions.outputs.MARKETING_VERSION }}(${{ steps.versions.outputs.PROJECT_VERSION }})"

      - name: Configure Keychain
        run: |
          security delete-keychain "$KEYCHAIN" || true
          security create-keychain -p "" "$KEYCHAIN" || true
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings

      - name: Decrypt Certificates and Provisioning Profiles
        run: |
          gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISION_ENCRYPTION_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"

      - name: Import Cetificates to Keychain
        run: |
          security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"

      - name: Install Provisioning Profiles
        run: |
          tar xzvf $DECRYPTED_PROVISION_FILE_PATH
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          for PROVISION in `ls ./*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done

      - name: Archive Project
        run: |
          mkdir -p artifacts
          /usr/bin/xcodebuild archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration "$XC_CONFIG" -archivePath "$XC_ARCHIVE_PATH" "OTHER_CODE_SIGN_FLAGS=--keychain '$KEYCHAIN'"

      - name: Export Archive
        run: |
          /usr/bin/xcodebuild -exportArchive -exportOptionsPlist "$XC_EXPORT_OPTIONS_FILE_PATH" -archivePath "$XC_ARCHIVE_PATH" -exportPath "$XC_EXPORT_PATH"

      - name: Setup Outputs
        id: setup-outputs
        run: |
          echo "::set-output name=artifactsName${{ matrix.xcConfig }}::Fonttastic-${{ matrix.xcConfig }}-${{ steps.versions.outputs.MARKETING_VERSION }}(${{ steps.versions.outputs.PROJECT_VERSION }})"
          echo "::set-output name=appPath${{ matrix.xcConfig }}::${{ matrix.appPath }}"

      - name: Upload XCArchive
        uses: actions/upload-artifact@v2
        with:
          name: Fonttastic-${{ matrix.xcConfig }}-XCArchive
          path: artifacts/Fonttastic-${{ matrix.xcConfig }}.xcarchive
          retention-days: 3

      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: Fonttastic-${{ matrix.xcConfig }}-App
          path: artifacts/Fonttastic-${{ matrix.xcConfig }}/Fonttastic.ipa
          retention-days: 3

  publish:
    name: Publish
    runs-on: macos-latest
    needs: archiveAndExport
    steps:
      - name: Make Artifacts Directory
        run: mkdir -p artifacts

      - name: Download Release IPA
        uses: actions/download-artifact@v2
        with:
          name: Fonttastic-Release-App
          path: artifacts

      - name: Download Beta IPA
        uses: actions/download-artifact@v2
        with:
          name: Fonttastic-Beta-App
          path: artifacts

      - name: Debug Downloaded Release Artifacts
        run: ls -R

      - name: Publish Release to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: ./artifacts/Fonttastic-Release/Fonttastic.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

      - name: Publish Beta to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: ./artifacts/Fonttastic-Beta/Fonttastic.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  bumpProjectVersion:
    name: Bump Project Version
    needs: publish
    runs-on: macos-latest
    steps:
      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Bump Project Version
        run: |
          sudo chmod +x ./bump-project-version.sh
          ./bump-project-version.sh

      - name: Get Bumped Version
        id: version
        run: |
          echo "::set-output name=PROJECT_VERSION::$( cat $CURRENT_PROJECT_VERSION_PATH )"

      - name: Commit Changes
        run: |
          git config --global user.name 'Fonttastic Bot'
          git config --global user.email 'fonttastic-bot@users.noreply.github.com'
          git add $CURRENT_PROJECT_VERSION_PATH
          git commit -m "Bumped current project version to ${{ steps.version.outputs.PROJECT_VERSION }}"
          git push
